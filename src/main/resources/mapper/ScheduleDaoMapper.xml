<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dangdiary.api.dao.ScheduleDAO">
    <select id="getDeleteUserChallengeIds" resultType="Integer">
        SELECT u.user_challenge_id
        FROM user_challenges u
                 LEFT JOIN diaries d
                           ON u.diary_id = d.diary_id
        WHERE u.recommend_type = 'daily'
          AND d.register_date IS NULL
          AND recommend_date &lt;= NOW()
    </select>
    <delete id="deleteChallenges">
        DELETE FROM user_challenges
               WHERE user_challenge_id IN
        <foreach collection="list" item="deleteUserChallengeId" open="(" close=")" separator=",">
          #{deleteUserChallengeId}
        </foreach>
    </delete>
    <select id="getFirebaseTokenInfos" resultType="com.dangdiary.api.domain.schedule.dto.FirebaseTokenInfoDTO">
        SELECT user_id userId, firebase_token firebaseToken, agree_challenge_notification agreeChallengeNotification
        FROM users
    </select>
    <select id="getNumberOfNotInProgressChallenge" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM challenges
        WHERE challenge_id NOT IN
              (SELECT u.challenge_id
               FROM user_challenges u
                   LEFT JOIN diaries d
                       ON u.diary_id = d.diary_id
               WHERE d.register_date IS NULL
                 AND u.user_id = #{userId}
               )
    </select>
    <insert id="insertDailyChallengeByUserId" parameterType="com.dangdiary.api.domain.schedule.dto.UserIdAndRecommendDateDTO">
        INSERT INTO user_challenges(user_id, challenge_id, recommend_type, recommend_date)
        VALUES (#{userId},
                (SELECT challenge_id FROM (SELECT c.challenge_id, IFNULL(u.count, 0) count FROM challenges c LEFT JOIN (SELECT challenge_id, COUNT(challenge_id) count FROM (SELECT u.challenge_id FROM user_challenges u LEFT JOIN challenges c ON u.challenge_id = c.challenge_id LEFT JOIN diaries d ON u.diary_id = d.diary_id WHERE u.user_id = #{userId} AND d.register_date IS NOT NULL) a GROUP BY challenge_id ORDER BY COUNT(challenge_id)) u ON c.challenge_id = u.challenge_id WHERE c.challenge_id NOT IN (SELECT u.challenge_id FROM user_challenges u LEFT JOIN diaries d ON u.diary_id = d.diary_id WHERE d.register_date IS NULL AND u.user_id = #{userId}) ORDER BY RAND() LIMIT 1) a),
            'daily',
            #{recommendDate})
    </insert>

    <select id="getDeleteWeeklyUserChallengeIds" resultType="Integer">
        SELECT u.user_challenge_id
        FROM user_challenges u
                 LEFT JOIN diaries d
                           ON u.diary_id = d.diary_id
        WHERE u.recommend_type = 'weekly'
          AND d.register_date IS NULL
          AND recommend_date &lt;= NOW()
    </select>
    <insert id="insertWeeklyChallengeByUserId" parameterType="com.dangdiary.api.domain.schedule.dto.UserIdAndRecommendDateDTO">
        INSERT INTO user_challenges(user_id, challenge_id, recommend_type, recommend_date)
        VALUES (#{userId},
                (SELECT challenge_id FROM (SELECT c.challenge_id, IFNULL(u.count, 0) count FROM challenges c LEFT JOIN (SELECT challenge_id, COUNT(challenge_id) count FROM (SELECT u.challenge_id FROM user_challenges u LEFT JOIN challenges c ON u.challenge_id = c.challenge_id LEFT JOIN diaries d ON u.diary_id = d.diary_id WHERE u.user_id = #{userId} AND d.register_date IS NOT NULL) a GROUP BY challenge_id ORDER BY COUNT(challenge_id)) u ON c.challenge_id = u.challenge_id WHERE c.challenge_id NOT IN (SELECT u.challenge_id FROM user_challenges u LEFT JOIN diaries d ON u.diary_id = d.diary_id WHERE d.register_date IS NULL AND u.user_id = #{userId}) ORDER BY RAND() LIMIT 1) a),
                'weekly',
                #{recommendDate})
    </insert>
</mapper>