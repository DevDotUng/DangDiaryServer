<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  로그인, 댕댕 주민등록증 등록 (로그인은 카카오 로그인과 애플 로그인을 사용중)  -->
<mapper namespace="com.dangdiary.api.dao.LoginDAO">
<!--  자동 로그인을 할때 이전에 어떤 소셜 로그인으로 했는지 가져옴  -->
  <select id="getLoginType" parameterType="int" resultType="String">
    SELECT login_type
    FROM users
    WHERE user_id = #{userId};
  </select>
  <select id="getLoginDate" parameterType="int" resultType="String">
    SELECT login_date
    FROM users
    WHERE user_id = #{userId};
  </select>
<!--  아이디가 있다면 로그인을 진행하고 없다면 추가해주기 위해 존재여부 확인  -->
  <select id="existId" parameterType="String" resultType="int">
    SELECT EXISTS
    (SELECT *
    FROM users
    WHERE social_id = #{socialId}) as existId
  </select>
<!--  소셜 아이디를 통해 유저 아이디를 얻어옴  -->
  <select id="getUserId" parameterType="String" resultType="int">
    SELECT user_id
    FROM users
    WHERE social_id = #{socialId}
  </select>
<!--  카카오 로그인을 했을 때 유저를 추가  -->
  <insert id="addUserWithKakao" parameterType="com.dangdiary.api.dto.login.LoginDTO">
    INSERT INTO users(login_type, social_id, access_token, refresh_token, name, admission_date)
    VALUES
    ('kakao', #{id}, #{accessToken}, #{refreshToken}, #{name}, NOW())
  </insert>
  <!--  애플 로그인을 했을 때 유저를 추가  -->
  <insert id="addUserWithApple" parameterType="com.dangdiary.api.dto.login.LoginDTO">
    INSERT INTO users(login_type, social_id, access_token, refresh_token, name, admission_date, login_date)
    VALUES
    ('apple', #{id}, #{accessToken}, #{refreshToken}, #{name}, NOW(), NOW())
  </insert>
<!--  카카오 로그인을 했을 때 유저 정보 업데이트  -->
  <update id="updateUserWithKakao" parameterType="com.dangdiary.api.dto.login.LoginDTO">
    UPDATE users
    SET social_id = #{id}, access_token = #{accessToken}, refresh_token = #{refreshToken}, name = #{name}, login_date = NOW()
    WHERE user_id = #{userId};
  </update>
  <!--  애플 로그인을 했을 때 유저 정보 업데이트  -->
  <update id="updateUserWithApple" parameterType="com.dangdiary.api.dto.login.LoginDTO">
    UPDATE users
    SET social_id = #{id}, refresh_token = #{refreshToken}
    WHERE user_id = #{userId};
  </update>
<!--  로그인을 할때 댕댕 주민등록증 등록을 했는지 확인하고 안했을 경우 등록 화면으로 가기 위해 dogs테이블에서 확인하여 응답에 같이 포함시켜준다.  -->
  <select id="existDog" parameterType="int" resultType="int">
    SELECT EXISTS
    (SELECT *
    FROM dogs
    WHERE user_id = #{userId}) as existDog
  </select>
<!--  로그인 응답을 가져옴  -->
  <select id="getLoginResponseDTO" parameterType="String" resultType="com.dangdiary.api.dto.login.LoginResponseDTO">
    SELECT user_id userId, name name, admission_date admissionDate
    FROM users
    WHERE social_id = #{socialId}
    LIMIT 1
  </select>
<!--  refreshToken을 가져옴  -->
  <select id="getRefreshToken" parameterType="int" resultType="String">
    SELECT refresh_token refreshToken
    FROM users
    WHERE user_id = #{userId}
    LIMIT 1
  </select>
<!--  댕댕 주민등록증 등록  -->
  <insert id="registerDogInfo" parameterType="com.dangdiary.api.dto.login.DogInfoDTO">
    INSERT INTO dogs(user_id, dog_name, profile_image, breed, birth, gender)
    VALUES
    (#{userId}, #{dogName}, #{profileImage}, #{breed}, #{birth}, #{gender})
  </insert>
<!--  댕댕 주민등록증 등록 중 닉네임 등록  -->
  <update id="registerNickname" parameterType="com.dangdiary.api.dto.login.DogInfoDTO">
    UPDATE users
    SET nickname = #{nickname}
    WHERE user_id = #{userId};
  </update>
<!--  댕댕 주민등록증 등록 후 응답으로 주기 위한 정보  -->
  <select id="getDogInfo" parameterType="int" resultType="com.dangdiary.api.dto.login.DogInfoDTO">
    SELECT u.user_id userId, u.nickname nickname, d.dog_name dogName, d.profile_image profileImage, d.breed breed, d.birth birth, d.gender gender
    FROM users u
    LEFT JOIN dogs d
    ON u.user_id = d.user_id
    WHERE u.user_id = #{userId}
  </select>
</mapper>