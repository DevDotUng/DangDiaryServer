<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  추천 챌린지 상세보기 화면, 챌린지 상태: 진행x, 진행중, 밀린 일기  -->
<mapper namespace="com.dangdiary.api.dao.ChallengeDetailDAO">
<!--  추천 챌린지가 진행중인지 확인  -->
  <select id="getIsChallenge" parameterType="int" resultType="int">
    SELECT COUNT(*)
    FROM user_challenges
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND start_date IS NOT NULL
    AND end_date IS NULL
  </select>
<!--  추천 챌린지가 밀린 일기인지 확인  -->
  <select id="getIsOverdueChallenge" parameterType="int" resultType="int">
    SELECT COUNT(*)
    FROM diaries
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND register_date IS NULL
  </select>
<!--  추천 챌린지의 정보를 불러옴  -->
  <select id="getChallengeDetailDTO" parameterType="int" resultType="com.dangdiary.api.dto.challengeDetail.ChallengeDetailTempDTO">
    SELECT image image, title title, content content, authentication_method authenticationMethod, sticker_image stickerImage, sticker_shape stickerShape
    FROM challenges
    WHERE challenge_id = #{challengeId}
    LIMIT 1
  </select>
<!--  도전 횟수를 불러옴(챌린지 제목 아래 '처음 도전하는 챌린지에요!' 텍스트를 위함)  -->
  <select id="getNumberOfComplete" parameterType="int" resultType="int">
    SELECT COUNT(*) numberOfComplete
    FROM user_challenges
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND end_date IS NOT NULL
  </select>
<!--  추천 챌린지일 경우 시간 제한이 있어 그 시간을 제공(recommendDate가 마감 시간이고 이 마감 시간을 통해서 앱단에서 계산함)  -->
  <select id="getRecommendDate" parameterType="int" resultType="String">
    SELECT recommend_date recommendDate
    FROM user_challenges
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    ORDER BY user_challenge_id DESC
    LIMIT 1
  </select>
<!--  '다른 아이들은 이렇게 했어요!' 사진들을 가져옴  -->
  <select id="getOtherChallenges" parameterType="int" resultType="com.dangdiary.api.dto.challengeDetail.OtherChallengeDTO">
    SELECT
    i.diary_id diaryId, image image
    FROM diary_images i
    LEFT JOIN diaries d
    ON i.diary_id = d.diary_id
    WHERE i.image_index = 0
    AND d.challenge_id = #{challengeId}
  </select>
<!--  화면 아래 버튼 도전할래요 버튼을 눌렀을때 추천 챌린지 일 수도 있고 그냥 챌린지 일 수도 있기때문에 이를 구분하기 위해 userChallengeId를 불러옴, 추천 챌린지면 integer가 오고 그냥 챌린지면 null  -->
  <select id="getUserChallengeId" parameterType="int" resultType="int">
    SELECT user_challenge_id userChallengeId
    FROM user_challenges
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND start_date IS NULL
  </select>
<!--  위의 userChallengeId가 null일 경우 userChallenge를 추가해줌  -->
  <insert id="insertUserChallenge" parameterType="int">
    INSERT INTO user_challenges(user_id, challenge_id, start_date)
    VALUES
    (#{userId}, #{challengeId}, NOW())
  </insert>
<!--  위의 userChallengeId가 integer일 경우 그 userChallenge의 start_date를 update함  -->
  <update id="updateUserChallenge" parameterType="int">
    UPDATE user_challenges
    SET start_date = NOW()
    WHERE user_challenge_id = #{userChallengeId}
  </update>

<!--  위에 언급했듯이 챌린지가 추천, 일반, 두가지로 나뉘므로 챌린지를 그만둘때 추천 챌린지면 추천 챌린지를 남기기 위해 recommendType을 불러옴  -->
  <select id="getRecommendType" parameterType="int" resultType="String">
    SELECT recommend_type recommendType
    FROM user_challenges
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND start_date IS NOT NULL
    AND end_date IS NULL
    ORDER BY user_challenge_id DESC
    LIMIT 1
  </select>
<!--  위의 recommendType이 null일 경우 userChallenge를 삭제한다.  -->
  <delete id="deleteUserChallenge" parameterType="int">
    DELETE FROM user_challenges
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND start_date IS NOT NULL
    AND end_date IS NULL
  </delete>
<!--  위의 recommendType이 null이 아닐 경우 userChallenge의 start_date를 null로 만들어 추천 챌린지 상태로 만든다.  -->
  <update id="stopUserChallenge" parameterType="int">
    UPDATE user_challenges
    SET start_date = NULL
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND start_date IS NOT NULL
    AND end_date IS NULL
  </update>
<!--  일기를 그만둘때 밀린 일기가 있을 경우 삭제하기 위함  -->
  <delete id="deleteOverdueDiary" parameterType="int">
    DELETE FROM diaries
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND register_date IS NULL
  </delete>
<!--  일기를 그만둘때 이유를 제출함  -->
  <insert id="submitReason" parameterType="com.dangdiary.api.dto.challengeDetail.ReasonDTO">
    INSERT INTO diary_admin(user_id, challenge_id, reason)
    VALUES
    (#{userId}, #{challengeId}, #{reason})
  </insert>

  <select id="getIsOverdueDiary" parameterType="int" resultType="boolean">
    SELECT EXISTS
        (SELECT * FROM user_challenges u
            LEFT JOIN diaries d
                ON u.diary_id = d.diary_id
                  WHERE u.diary_id IS NOT NULL
                    AND d.register_date IS NULL
                    AND d.user_id = #{userId}
                    AND d.challenge_id = #{challengeId})
  </select>
<!--  챌린지를 완료하면 밀린 일기를 추가해줌  -->
  <insert id="insertEmptyDiary" parameterType="int">
    INSERT INTO diaries(user_id, challenge_id)
    VALUES
    (#{userId}, #{challengeId})
  </insert>
  <select id="getDiaryId" parameterType="int" resultType="int">
    SELECT diary_id diaryId
    FROM diaries
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    ORDER BY diary_id DESC
    LIMIT 1
  </select>
<!--  챌린지를 완료했기 때문에 endDate를 update해줌  -->
  <update id="updateEndDateAndDiaryId" parameterType="int">
    UPDATE user_challenges
    SET end_date = NOW(), diary_id = #{diaryId}
    WHERE user_id = #{userId}
    AND challenge_id = #{challengeId}
    AND start_date IS NOT NULL
    AND end_date IS NULL
  </update>
  <select id="getOverdueDiary" parameterType="int" resultType="com.dangdiary.api.dto.challengeDetail.OverdueDiaryDTO">
    SELECT d.diary_id diaryId, d.user_id userId, d.challenge_id challengeId, u.end_date endDate, d.weather weather, d.feeling feeling, d.title title, d.content content, d.is_public isPublic
    FROM user_challenges u
           LEFT JOIN diaries d
                     ON u.diary_id = d.diary_id
    WHERE u.diary_id = #{diaryId}
  </select>
  <select id="getTags" parameterType="int" resultType="String">
    SELECT hash_tag
    FROM tags
    WHERE diary_id = #{diaryId}
  </select>
</mapper>